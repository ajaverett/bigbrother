geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
theme_test()
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
theme_test() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
theme_test() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
theme_test() +
theme(axis.text.x = element_text(angle = 45, vjust = 0., hjust=1))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
theme_test() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0))
1
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
theme_test() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
theme_test() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
theme_test() +
theme(axis.text.x = element_text(angle = 22, vjust = 1, hjust=1))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test"
)
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test"
)
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test",
x = "test"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1)) +
legend.title = element_text("test"),
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1)) +
legend.title = element_text("test")
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1)) +
scale_color_manual(labels = c("Group 1", "Group 2", "Group 3"),
values = c("red", "blue", "green"))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1)) +
guides(fill=guide_legend(title="New Legend Title"))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1)) +
guides(fill=guide_legend(title="New Legend Title"))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1)) +
scale_fill_discrete(name = "New Legend Title")
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "test",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1)) +
scale_fill_manual('legend_title')
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "XYPlot",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1)) +
scale_fill_manual('legend_title')
scale_color_manual(labels = c("Group 1", "Group 2", "Group 3"),
values = c("#0C0EC6", "#32B1C3", "#43E2B7"))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "XYPlot",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1)) +
scale_fill_manual('legend_title') +
scale_color_manual(labels = c("Group 1", "Group 2", "Group 3"),
values = c("#0C0EC6", "#32B1C3", "#43E2B7"))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "XYPlot",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1)) +
scale_fill_manual('legend_title') +
scale_color_manual(#labels = c("Group 1", "Group 2", "Group 3"),
values = c("#0C0EC6", "#32B1C3", "#43E2B7"))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "XYPlot",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1)) +
scale_fill_manual('legend_title') +
scale_color_manual(values = c("#0C0EC6", "#32B1C3", "#43E2B7"))
ggplot(HighSchoolSeniors2, aes(x = s.hours, y = iq, group = v.hours, color = v.hours)) +
geom_point(alpha = .5) +
stat_summary(fun = "mean", geom = "line", size = 1) +
labs(
title = "XYPlot",
x = "Sleep category",
y = "Intelligence score"
) +
theme_test() +
theme(axis.text.x = element_text(angle = 22.5, vjust = 1, hjust=1)) +
scale_fill_manual('legend_title') +
scale_color_manual(values = c("#0C0EC6", "#32B1C3", "#43E2B7")) +
coord_cartesian(ylim = c(80, 120))
shiny::runApp('GitHub/bigbrother')
library(shiny)
library(shinyWidgets)
library(tidyverse)
library(plotly)
ui <- fluidPage(
titlePanel("Search Employee Database"),
h5("The Data in this report is fictitious, pls no report"),
sidebarLayout(
sidebarPanel(
uiOutput("picker"),
actionButton("view", "View Selection"),
p('___'),
textInput('name', 'Enter Employee ID', "VAuq292"),
p('___'),
h4('Worst Employees Today'),
tableOutput("worst_table"),
p('___'),
textAreaInput('email',
"Insert email text",
"This is a warning...", rows = 5),
actionButton("button",
"Send warning to worst employees today by email",
),
),
mainPanel(
actionButton("runfile",
"Add day to data",
),
h2('Employee Explorer'),
h4("Productivity Over Time"),
plotOutput('trend'),
h4("Employee Database"),
DT::dataTableOutput("table"),
)
)
)
library(shiny)
library(DT)
library(tidyverse)
server <- function(session, input, output) {
df <- read_csv("people.csv")
data <- reactive({
df
})
output$picker <- renderUI({
pickerInput(inputId = 'pick',
label = 'Choose columns for employee database',
choices = colnames(data()),
options = list(`actions-box` = TRUE),multiple = T)
})
datasetInput <- eventReactive(input$view,{
datasetInput <- data() %>%
select(input$pick)
return(datasetInput)
})
output$table <- renderDT({datasetInput()
})
observeEvent(input$runfile, {
output$trend <- renderPlot({
read_csv("prod.csv") %>% select(input$name) %>% mutate(count = .[[1]], index = row_number()) %>%
ggplot(aes(x = index, y = count)) +
geom_line(size = 2) +
theme_classic() +
labs(x = "Recorded days",
y = 'Productivity Score')
})
})
observeEvent(input$runfile, {
output$worst_table <- renderTable({
read_csv("prod.csv") |>
tail(1) |>
mutate(row = row_number()) |>
pivot_longer(cols = !row,  names_to = "worker_id", values_to = "productivity") |>
arrange(productivity) |>
head(10) |>
left_join(
(read_csv("people.csv") |> select(worker_id, name))
) |> select(-row)
})
})
observeEvent(input$button, {
session$sendCustomMessage(type = 'testmessage',
message = 'Thank you for clicking')
})
observeEvent(input$runfile, {
reticulate::py_run_file("update_prod.py")
# reticulate::py_run_file("automation.py")
})
}
# Run the application
shinyApp(ui = ui, server = server)
setwd("~/GitHub/bigbrother")
library(shiny)
library(shinyWidgets)
library(tidyverse)
library(plotly)
ui <- fluidPage(
titlePanel("Search Employee Database"),
h5("The Data in this report is fictitious, pls no report"),
sidebarLayout(
sidebarPanel(
uiOutput("picker"),
actionButton("view", "View Selection"),
p('___'),
textInput('name', 'Enter Employee ID', "VAuq292"),
p('___'),
h4('Worst Employees Today'),
tableOutput("worst_table"),
p('___'),
textAreaInput('email',
"Insert email text",
"This is a warning...", rows = 5),
actionButton("button",
"Send warning to worst employees today by email",
),
),
mainPanel(
actionButton("runfile",
"Add day to data",
),
h2('Employee Explorer'),
h4("Productivity Over Time"),
plotOutput('trend'),
h4("Employee Database"),
DT::dataTableOutput("table"),
)
)
)
library(shiny)
library(DT)
library(tidyverse)
server <- function(session, input, output) {
df <- read_csv("people.csv")
data <- reactive({
df
})
output$picker <- renderUI({
pickerInput(inputId = 'pick',
label = 'Choose columns for employee database',
choices = colnames(data()),
options = list(`actions-box` = TRUE),multiple = T)
})
datasetInput <- eventReactive(input$view,{
datasetInput <- data() %>%
select(input$pick)
return(datasetInput)
})
output$table <- renderDT({datasetInput()
})
observeEvent(input$runfile, {
output$trend <- renderPlot({
read_csv("prod.csv") %>% select(input$name) %>% mutate(count = .[[1]], index = row_number()) %>%
ggplot(aes(x = index, y = count)) +
geom_line(size = 2) +
theme_classic() +
labs(x = "Recorded days",
y = 'Productivity Score')
})
})
observeEvent(input$runfile, {
output$worst_table <- renderTable({
read_csv("prod.csv") |>
tail(1) |>
mutate(row = row_number()) |>
pivot_longer(cols = !row,  names_to = "worker_id", values_to = "productivity") |>
arrange(productivity) |>
head(10) |>
left_join(
(read_csv("people.csv") |> select(worker_id, name))
) |> select(-row)
})
})
observeEvent(input$button, {
session$sendCustomMessage(type = 'testmessage',
message = 'Thank you for clicking')
})
observeEvent(input$runfile, {
reticulate::py_run_file("update_prod.py")
# reticulate::py_run_file("automation.py")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
library(shiny)
library(shinyWidgets)
library(tidyverse)
library(plotly)
ui <- fluidPage(
titlePanel("Search Employee Database"),
h5("The Data in this report is fictitious, pls no report"),
sidebarLayout(
sidebarPanel(
uiOutput("picker"),
actionButton("view", "View Selection"),
p('___'),
textInput('name', 'Enter Employee ID', "VAuq292"),
p('___'),
h4('Worst Employees Today'),
tableOutput("worst_table"),
p('___'),
selectInput('email',
"Insert email text",
"This is a warning...", rows = 5),
actionButton("button",
"Fire incompetent employees!",
),
),
mainPanel(
actionButton("runfile",
"Add day to data",
),
h2('Employee Explorer'),
h4("Productivity Over Time"),
plotOutput('trend'),
h4("Employee Database"),
DT::dataTableOutput("table"),
)
)
)
library(shiny)
library(DT)
library(tidyverse)
server <- function(session, input, output) {
df <- read_csv("people.csv")
data <- reactive({
df
})
output$picker <- renderUI({
pickerInput(inputId = 'pick',
label = 'Choose columns for employee database',
choices = colnames(data()),
options = list(`actions-box` = TRUE),multiple = T)
})
datasetInput <- eventReactive(input$view,{
datasetInput <- data() %>%
select(input$pick)
return(datasetInput)
})
output$table <- renderDT({datasetInput()
})
observeEvent(input$runfile, {
output$trend <- renderPlot({
read_csv("prod.csv") %>% select(input$name) %>% mutate(count = .[[1]], index = row_number()) %>%
ggplot(aes(x = index, y = count)) +
geom_line(size = 2) +
theme_classic() +
labs(x = "Recorded days",
y = 'Productivity Score')
})
})
observeEvent(input$runfile, {
output$worst_table <- renderTable({
read_csv("prod.csv") |>
tail(1) |>
mutate(row = row_number()) |>
pivot_longer(cols = !row,  names_to = "worker_id", values_to = "productivity") |>
arrange(productivity) |>
head(10) |>
left_join(
(read_csv("people.csv") |> select(worker_id, name))
) |> select(-row)
})
})
observeEvent(input$button, {
session$sendCustomMessage(type = 'testmessage',
message = 'Thank you for clicking')
})
observeEvent(input$runfile, {
reticulate::py_run_file("update_prod.py")
# reticulate::py_run_file("automation.py")
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
